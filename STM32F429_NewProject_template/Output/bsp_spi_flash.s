; generated by Component: ARM Compiler 5.06 update 4 (build 422) Tool: ArmCC [4d3604]
; commandline ArmCC [--c99 --split_sections --debug -c -S -o..\..\output\bsp_spi_flash.s --depend=..\..\output\bsp_spi_flash.d --cpu=Cortex-M4.fp --apcs=interwork -O1 --diag_suppress=9931 -I..\..\Libraries\CMSIS\Device\ST\STM32F4xx\Include -I..\..\Libraries\CMSIS\Include -I..\..\Libraries\STM32F4xx_StdPeriph_Driver\inc -I..\..\User -IE:\Synchronization\CodeProject\GitHub\Defond\Battery_Detection\Software\EmbedSoftware\STM32F429_NewProject_template\Project\RVMDK£¨uv5£©\RTE\_New_Project_Template -ID:\Keil_v5_for_ARM\ARM\PACK\Keil\STM32F4xx_DFP\2.10.0\Drivers\CMSIS\Device\ST\STM32F4xx\Include -ID:\Keil_v5_for_ARM\ARM\CMSIS\Include -D__MICROLIB -D__UVISION_VERSION=522 -DSTM32F429xx -DUSE_STDPERIPH_DRIVER -DSTM32F429_439xx --omf_browse=..\..\output\bsp_spi_flash.crf ..\..\User\bsp\spi\bsp_spi_flash.c]
        THUMB
        REQUIRE8
        PRESERVE8

        AREA ||i.SPI_FLASH_BufferRead||, CODE, READONLY, ALIGN=2

SPI_FLASH_BufferRead PROC
        PUSH     {r4-r8,lr}
        MOV      r4,r0
        MOV      r8,r1
        MOV      r5,r2
        LDR      r7,|L0.72|
        MOVS     r6,#0x10
        STRH     r6,[r7,#0x1a]
        MOVS     r0,#3
        BL       SPI_FLASH_SendByte
        UBFX     r0,r8,#16,#8
        BL       SPI_FLASH_SendByte
        UBFX     r0,r8,#8,#8
        BL       SPI_FLASH_SendByte
        AND      r0,r8,#0xff
        BL       SPI_FLASH_SendByte
        B        |L0.58|
|L0.48|
        MOVS     r0,#0xff
        BL       SPI_FLASH_SendByte
        STRB     r0,[r4],#1
|L0.58|
        SUBS     r5,r5,#1
        UXTH     r5,r5
        BCS      |L0.48|
        STRH     r6,[r7,#0x18]
        POP      {r4-r8,pc}
        ENDP

        DCW      0x0000
|L0.72|
        DCD      0x40020000

        AREA ||i.SPI_FLASH_BufferWrite||, CODE, READONLY, ALIGN=1

SPI_FLASH_BufferWrite PROC
        PUSH     {r4-r10,lr}
        MOV      r6,r0
        MOV      r5,r1
        UXTB     r0,r5
        RSBS     r1,r0,#0
        UXTB     r7,r1
        LSRS     r4,r2,#8
        AND      r9,r2,#0xff
        MOV      r8,#0x100
        CMP      r0,#0
        BEQ      |L1.66|
        UXTB     r0,r5
        RSBS     r0,r0,#0
        UXTB     r0,r0
        ADD      r10,r5,r0
        CBZ      r4,|L1.118|
        SUBS     r0,r2,r7
        UXTH     r0,r0
        LSRS     r4,r0,#8
        AND      r9,r0,#0xff
        MOV      r2,r7
        MOV      r1,r5
        MOV      r0,r6
        BL       SPI_FLASH_PageWrite
        MOV      r5,r10
        ADD      r6,r6,r7
        B        |L1.182|
|L1.66|
        CBNZ     r4,|L1.98|
        MOV      r1,r5
        MOV      r0,r6
        POP      {r4-r10,lr}
        B.W      SPI_FLASH_PageWrite
|L1.80|
        MOV      r2,r8
        MOV      r1,r5
        MOV      r0,r6
        BL       SPI_FLASH_PageWrite
        ADD      r5,r5,#0x100
        ADD      r6,r6,#0x100
|L1.98|
        SUBS     r4,r4,#1
        UXTB     r4,r4
        BCS      |L1.80|
        MOV      r2,r9
        MOV      r1,r5
        MOV      r0,r6
        POP      {r4-r10,lr}
        B.W      SPI_FLASH_PageWrite
|L1.118|
        CMP      r9,r7
        BLS      |L1.152|
        SUB      r0,r9,r7
        UXTB     r4,r0
        MOV      r2,r7
        MOV      r1,r5
        MOV      r0,r6
        BL       SPI_FLASH_PageWrite
        MOV      r1,r10
        ADDS     r0,r6,r7
        MOV      r2,r4
        POP      {r4-r10,lr}
        B.W      SPI_FLASH_PageWrite
|L1.152|
        MOV      r1,r5
        MOV      r0,r6
        POP      {r4-r10,lr}
        B.W      SPI_FLASH_PageWrite
|L1.164|
        MOV      r2,r8
        MOV      r1,r5
        MOV      r0,r6
        BL       SPI_FLASH_PageWrite
        ADD      r5,r5,#0x100
        ADD      r6,r6,#0x100
|L1.182|
        SUBS     r4,r4,#1
        UXTB     r4,r4
        BCS      |L1.164|
        CMP      r9,#0
        BEQ      |L1.208|
        MOV      r2,r9
        MOV      r1,r5
        MOV      r0,r6
        POP      {r4-r10,lr}
        B.W      SPI_FLASH_PageWrite
|L1.208|
        POP      {r4-r10,pc}
        ENDP


        AREA ||i.SPI_FLASH_BulkErase||, CODE, READONLY, ALIGN=2

SPI_FLASH_BulkErase PROC
        PUSH     {r4-r6,lr}
        BL       SPI_FLASH_WriteEnable
        LDR      r4,|L2.28|
        MOVS     r5,#0x10
        STRH     r5,[r4,#0x1a]
        MOVS     r0,#0xc7
        BL       SPI_FLASH_SendByte
        STRH     r5,[r4,#0x18]
        POP      {r4-r6,lr}
        B.W      SPI_FLASH_WaitForWriteEnd
        ENDP

|L2.28|
        DCD      0x40020000

        AREA ||i.SPI_FLASH_Init||, CODE, READONLY, ALIGN=2

SPI_FLASH_Init PROC
        PUSH     {r4-r8,lr}
        SUB      sp,sp,#0x20
        MOVS     r1,#1
        MOVS     r0,#3
        BL       RCC_AHB1PeriphClockCmd
        MOVS     r1,#1
        LSLS     r0,r1,#15
        BL       RCC_APB2PeriphClockCmd
        LDR      r7,|L3.204|
        MOVS     r2,#6
        MOVS     r1,#3
        MOV      r0,r7
        BL       GPIO_PinAFConfig
        MOVS     r2,#6
        MOVS     r1,#4
        MOV      r0,r7
        BL       GPIO_PinAFConfig
        MOVS     r2,#6
        MOVS     r1,#5
        MOV      r0,r7
        BL       GPIO_PinAFConfig
        MOVS     r0,#8
        STR      r0,[sp,#4]
        MOVS     r5,#2
        STRB     r5,[sp,#9]
        STRB     r5,[sp,#8]
        MOVS     r4,#0
        STRB     r4,[sp,#0xa]
        STRB     r4,[sp,#0xb]
        ADD      r1,sp,#4
        MOV      r0,r7
        BL       GPIO_Init
        MOVS     r6,#0x10
        STR      r6,[sp,#4]
        ADD      r1,sp,#4
        MOV      r0,r7
        BL       GPIO_Init
        MOVS     r0,#0x20
        STR      r0,[sp,#4]
        ADD      r1,sp,#4
        MOV      r0,r7
        BL       GPIO_Init
        STR      r6,[sp,#4]
        MOVS     r7,#1
        STRB     r7,[sp,#8]
        LDR      r8,|L3.208|
        ADD      r1,sp,#4
        MOV      r0,r8
        BL       GPIO_Init
        STRH     r6,[r8,#0x18]
        STRH     r4,[sp,#0xc]
        MOV      r0,#0x104
        STRH     r0,[sp,#0xe]
        STRH     r4,[sp,#0x10]
        STRH     r5,[sp,#0x12]
        STRH     r7,[sp,#0x14]
        LSLS     r0,r5,#8
        STRH     r0,[sp,#0x16]
        MOVS     r0,#0x28
        STRH     r0,[sp,#0x18]
        STRH     r4,[sp,#0x1a]
        MOVS     r0,#7
        STRH     r0,[sp,#0x1c]
        LDR      r4,|L3.212|
        ADD      r1,sp,#0xc
        MOV      r0,r4
        BL       SPI_Init
        MOVS     r1,#1
        MOV      r0,r4
        BL       SPI_Cmd
        ADD      sp,sp,#0x20
        POP      {r4-r8,pc}
        ENDP

|L3.204|
        DCD      0x40020400
|L3.208|
        DCD      0x40020000
|L3.212|
        DCD      0x40003c00

        AREA ||i.SPI_FLASH_PageWrite||, CODE, READONLY, ALIGN=2

SPI_FLASH_PageWrite PROC
        PUSH     {r4-r8,lr}
        MOV      r5,r0
        MOV      r8,r1
        MOV      r4,r2
        BL       SPI_FLASH_WriteEnable
        LDR      r7,|L4.92|
        MOVS     r6,#0x10
        STRH     r6,[r7,#0x1a]
        MOVS     r0,#2
        BL       SPI_FLASH_SendByte
        UBFX     r0,r8,#16,#8
        BL       SPI_FLASH_SendByte
        UBFX     r0,r8,#8,#8
        BL       SPI_FLASH_SendByte
        AND      r0,r8,#0xff
        BL       SPI_FLASH_SendByte
        LSLS     r0,r6,#4
        CMP      r4,r0
        BLS      |L4.74|
        MOV      r4,r0
        ADR      r0,|L4.96|
        BL       __2printf
        B        |L4.74|
|L4.66|
        LDRB     r0,[r5,#0]
        BL       SPI_FLASH_SendByte
        ADDS     r5,r5,#1
|L4.74|
        SUBS     r4,r4,#1
        UXTH     r4,r4
        BCS      |L4.66|
        STRH     r6,[r7,#0x18]
        POP      {r4-r8,lr}
        B.W      SPI_FLASH_WaitForWriteEnd
        ENDP

        DCW      0x0000
|L4.92|
        DCD      0x40020000
|L4.96|
        DCB      "<<-FLASH-ERROR->> SPI_FLASH_PageWrite too large!\n",0
        DCB      0
        DCB      0

        AREA ||i.SPI_FLASH_ReadByte||, CODE, READONLY, ALIGN=1

SPI_FLASH_ReadByte PROC
        MOVS     r0,#0xff
        B.W      SPI_FLASH_SendByte
        ENDP


        AREA ||i.SPI_FLASH_ReadDeviceID||, CODE, READONLY, ALIGN=2

SPI_FLASH_ReadDeviceID PROC
        PUSH     {r4-r6,lr}
        LDR      r5,|L6.44|
        MOVS     r4,#0x10
        STRH     r4,[r5,#0x1a]
        MOVS     r0,#0xab
        BL       SPI_FLASH_SendByte
        MOVS     r0,#0xff
        BL       SPI_FLASH_SendByte
        MOVS     r0,#0xff
        BL       SPI_FLASH_SendByte
        MOVS     r0,#0xff
        BL       SPI_FLASH_SendByte
        MOVS     r0,#0xff
        BL       SPI_FLASH_SendByte
        STRH     r4,[r5,#0x18]
        POP      {r4-r6,pc}
        ENDP

        DCW      0x0000
|L6.44|
        DCD      0x40020000

        AREA ||i.SPI_FLASH_ReadID||, CODE, READONLY, ALIGN=2

SPI_FLASH_ReadID PROC
        PUSH     {r4-r8,lr}
        LDR      r7,|L7.56|
        MOVS     r4,#0x10
        STRH     r4,[r7,#0x1a]
        MOVS     r0,#0x9f
        BL       SPI_FLASH_SendByte
        MOVS     r0,#0xff
        BL       SPI_FLASH_SendByte
        MOV      r5,r0
        MOVS     r0,#0xff
        BL       SPI_FLASH_SendByte
        MOV      r6,r0
        MOVS     r0,#0xff
        BL       SPI_FLASH_SendByte
        MOV      r1,r0
        STRH     r4,[r7,#0x18]
        LSLS     r0,r5,#16
        ORR      r0,r0,r6,LSL #8
        ORRS     r0,r0,r1
        POP      {r4-r8,pc}
        ENDP

        DCW      0x0000
|L7.56|
        DCD      0x40020000

        AREA ||i.SPI_FLASH_SectorErase||, CODE, READONLY, ALIGN=2

SPI_FLASH_SectorErase PROC
        PUSH     {r4-r6,lr}
        MOV      r4,r0
        BL       SPI_FLASH_WriteEnable
        BL       SPI_FLASH_WaitForWriteEnd
        LDR      r6,|L8.56|
        MOVS     r5,#0x10
        STRH     r5,[r6,#0x1a]
        MOVS     r0,#0x20
        BL       SPI_FLASH_SendByte
        UBFX     r0,r4,#16,#8
        BL       SPI_FLASH_SendByte
        UBFX     r0,r4,#8,#8
        BL       SPI_FLASH_SendByte
        UXTB     r0,r4
        BL       SPI_FLASH_SendByte
        STRH     r5,[r6,#0x18]
        POP      {r4-r6,lr}
        B.W      SPI_FLASH_WaitForWriteEnd
        ENDP

|L8.56|
        DCD      0x40020000

        AREA ||i.SPI_FLASH_SendByte||, CODE, READONLY, ALIGN=2

SPI_FLASH_SendByte PROC
        PUSH     {r4-r8,lr}
        MOV      r7,r0
        LDR      r4,|L9.104|
        MOV      r5,#0x1000
        STR      r5,[r4,#4]  ; SPITimeout
        LDR      r6,|L9.108|
        B        |L9.38|
|L9.18|
        LDR      r0,[r4,#4]  ; SPITimeout
        SUBS     r1,r0,#1
        STR      r1,[r4,#4]  ; SPITimeout
        BCS      |L9.38|
        MOVS     r0,#0
        BL       SPI_TIMEOUT_UserCallback
        UXTB     r0,r0
|L9.34|
        POP      {r4-r8,pc}
|L9.38|
        MOVS     r1,#2
        MOV      r0,r6
        BL       SPI_I2S_GetFlagStatus
        CMP      r0,#0
        BEQ      |L9.18|
        MOV      r1,r7
        MOV      r0,r6
        BL       SPI_I2S_SendData
        STR      r5,[r4,#4]  ; SPITimeout
        B        |L9.80|
|L9.62|
        LDR      r1,[r4,#4]  ; SPITimeout
        SUBS     r2,r1,#1
        STR      r2,[r4,#4]  ; SPITimeout
        BCS      |L9.80|
        MOVS     r0,#1
        BL       SPI_TIMEOUT_UserCallback
        UXTB     r0,r0
        B        |L9.34|
|L9.80|
        MOVS     r1,#1
        MOV      r0,r6
        BL       SPI_I2S_GetFlagStatus
        CMP      r0,#0
        BEQ      |L9.62|
        MOV      r0,r6
        BL       SPI_I2S_ReceiveData
        UXTB     r0,r0
        B        |L9.34|
        ENDP

        DCW      0x0000
|L9.104|
        DCD      ||.data||
|L9.108|
        DCD      0x40003c00

        AREA ||i.SPI_FLASH_SendHalfWord||, CODE, READONLY, ALIGN=2

SPI_FLASH_SendHalfWord PROC
        PUSH     {r4-r8,lr}
        MOV      r7,r0
        LDR      r4,|L10.100|
        MOV      r5,#0x1000
        STR      r5,[r4,#4]  ; SPITimeout
        LDR      r6,|L10.104|
        B        |L10.36|
|L10.18|
        LDR      r0,[r4,#4]  ; SPITimeout
        SUBS     r1,r0,#1
        STR      r1,[r4,#4]  ; SPITimeout
        BCS      |L10.36|
        POP      {r4-r8,lr}
        MOVS     r0,#2
        B.W      SPI_TIMEOUT_UserCallback
|L10.36|
        MOVS     r1,#2
        MOV      r0,r6
        BL       SPI_I2S_GetFlagStatus
        CMP      r0,#0
        BEQ      |L10.18|
        MOV      r1,r7
        MOV      r0,r6
        BL       SPI_I2S_SendData
        STR      r5,[r4,#4]  ; SPITimeout
        B        |L10.78|
|L10.60|
        LDR      r1,[r4,#4]  ; SPITimeout
        SUBS     r2,r1,#1
        STR      r2,[r4,#4]  ; SPITimeout
        BCS      |L10.78|
        POP      {r4-r8,lr}
        MOVS     r0,#3
        B.W      SPI_TIMEOUT_UserCallback
|L10.78|
        MOVS     r1,#1
        MOV      r0,r6
        BL       SPI_I2S_GetFlagStatus
        CMP      r0,#0
        BEQ      |L10.60|
        MOV      r0,r6
        POP      {r4-r8,lr}
        B.W      SPI_I2S_ReceiveData
        ENDP

|L10.100|
        DCD      ||.data||
|L10.104|
        DCD      0x40003c00

        AREA ||i.SPI_FLASH_StartReadSequence||, CODE, READONLY, ALIGN=2

SPI_FLASH_StartReadSequence PROC
        PUSH     {r4,lr}
        MOV      r4,r0
        LDR      r1,|L11.44|
        MOVS     r0,#0x10
        STRH     r0,[r1,#0x1a]
        MOVS     r0,#3
        BL       SPI_FLASH_SendByte
        UBFX     r0,r4,#16,#8
        BL       SPI_FLASH_SendByte
        UBFX     r0,r4,#8,#8
        BL       SPI_FLASH_SendByte
        UXTB     r0,r4
        POP      {r4,lr}
        B.W      SPI_FLASH_SendByte
        ENDP

        DCW      0x0000
|L11.44|
        DCD      0x40020000

        AREA ||i.SPI_FLASH_WaitForWriteEnd||, CODE, READONLY, ALIGN=2

SPI_FLASH_WaitForWriteEnd PROC
        PUSH     {r4-r6,lr}
        LDR      r6,|L12.52|
        MOVS     r5,#0x10
        STRH     r5,[r6,#0x1a]
        MOVS     r0,#5
        BL       SPI_FLASH_SendByte
        LDR      r4,|L12.56|
        LSLS     r0,r5,#8
        STR      r0,[r4,#4]  ; SPITimeout
|L12.20|
        MOVS     r0,#0xff
        BL       SPI_FLASH_SendByte
        LDR      r1,[r4,#4]  ; SPITimeout
        SUBS     r2,r1,#1
        STR      r2,[r4,#4]  ; SPITimeout
        BCS      |L12.44|
        POP      {r4-r6,lr}
        MOVS     r0,#4
        B.W      SPI_TIMEOUT_UserCallback
|L12.44|
        LSLS     r0,r0,#31
        BNE      |L12.20|
        STRH     r5,[r6,#0x18]
        POP      {r4-r6,pc}
        ENDP

|L12.52|
        DCD      0x40020000
|L12.56|
        DCD      ||.data||

        AREA ||i.SPI_FLASH_WriteEnable||, CODE, READONLY, ALIGN=2

SPI_FLASH_WriteEnable PROC
        PUSH     {r4-r6,lr}
        LDR      r4,|L13.20|
        MOVS     r5,#0x10
        STRH     r5,[r4,#0x1a]
        MOVS     r0,#6
        BL       SPI_FLASH_SendByte
        STRH     r5,[r4,#0x18]
        POP      {r4-r6,pc}
        ENDP

        DCW      0x0000
|L13.20|
        DCD      0x40020000

        AREA ||i.SPI_Flash_PowerDown||, CODE, READONLY, ALIGN=2

SPI_Flash_PowerDown PROC
        PUSH     {r4-r6,lr}
        LDR      r4,|L14.20|
        MOVS     r5,#0x10
        STRH     r5,[r4,#0x1a]
        MOVS     r0,#0xb9
        BL       SPI_FLASH_SendByte
        STRH     r5,[r4,#0x18]
        POP      {r4-r6,pc}
        ENDP

        DCW      0x0000
|L14.20|
        DCD      0x40020000

        AREA ||i.SPI_Flash_WAKEUP||, CODE, READONLY, ALIGN=2

SPI_Flash_WAKEUP PROC
        PUSH     {r4-r6,lr}
        LDR      r4,|L15.20|
        MOVS     r5,#0x10
        STRH     r5,[r4,#0x1a]
        MOVS     r0,#0xab
        BL       SPI_FLASH_SendByte
        STRH     r5,[r4,#0x18]
        POP      {r4-r6,pc}
        ENDP

        DCW      0x0000
|L15.20|
        DCD      0x40020000

        AREA ||i.SPI_TIMEOUT_UserCallback||, CODE, READONLY, ALIGN=2

        REQUIRE _printf_percent
        REQUIRE _printf_d
        REQUIRE _printf_int_dec
SPI_TIMEOUT_UserCallback PROC
        PUSH     {r4,lr}
        MOV      r1,r0
        ADR      r0,|L16.16|
        BL       __2printf
        MOVS     r0,#0
        POP      {r4,pc}
        ENDP

        DCW      0x0000
|L16.16|
        DCB      "<<-FLASH-ERROR->> SPI ",181,200,180,253,179,172,202,177
        DCB      "!errorCode = %d\n",0
        DCB      0

        AREA ||i.init_cfg||, CODE, READONLY, ALIGN=2

init_cfg PROC
        PUSH     {r4,lr}
        MOVS     r1,#0
        MOVS     r2,#0
        LDR      r3,|L17.40|
        MOVS     r4,#0xfe
|L17.10|
        ADD      r0,r1,r1,LSL #1
        STRB     r4,[r3,r0,LSL #1]
        ADD      r0,r3,r0,LSL #1
        STRB     r2,[r0,#1]
        STRB     r2,[r0,#2]
        STRB     r2,[r0,#3]
        STRB     r2,[r0,#4]
        STRB     r2,[r0,#5]
        ADDS     r1,r1,#1
        CMP      r1,#1
        BLT      |L17.10|
        POP      {r4,pc}
        ENDP

|L17.40|
        DCD      ||.data||+0x8

        AREA ||i.set_adc||, CODE, READONLY, ALIGN=2

set_adc PROC
        PUSH     {r4-r6,lr}
        UBFX     r4,r0,#1,#1
        LDR      r5,|L18.40|
        ADDS     r6,r4,#2
        STRB     r6,[r5,#0]
        LSLS     r0,r0,#7
        ADD      r1,r0,r1,LSL #4
        ADD      r1,r1,r2
        ADDS     r1,r1,#0x60
        STRB     r1,[r5,#1]
        ADDS     r4,r4,#4
        ADDS     r1,r5,#2
        STRB     r4,[r1,#0]
        ADD      r0,r0,r3
        ADDS     r0,r0,#0x60
        STRB     r0,[r1,#1]
        POP      {r4-r6,pc}
        ENDP

        DCW      0x0000
|L18.40|
        DCD      ||.data||

        AREA ||i.wakeup_sleep||, CODE, READONLY, ALIGN=2

wakeup_sleep PROC
        PUSH     {r4-r6,lr}
        LDR      r4,|L19.20|
        MOVS     r5,#0x10
        STRH     r5,[r4,#0x1a]
        MOVS     r0,#1
        BL       Delay_10_us
        STRH     r5,[r4,#0x18]
        POP      {r4-r6,pc}
        ENDP

        DCW      0x0000
|L19.20|
        DCD      0x40020000

        AREA ||.arm_vfe_header||, DATA, READONLY, NOALLOC, ALIGN=2

        DCD      0x00000000

        AREA ||.bss||, DATA, NOINIT, ALIGN=1

cell_codes
        %        24

        AREA ||area_number.22||, DATA, NOINIT, ALIGN=1

        EXPORTAS ||area_number.22||, ||.bss||
aux_codes
        %        12

        AREA ||.constdata||, DATA, READONLY, ALIGN=0

TOTAL_IC
        DCB      0x01

        AREA ||.data||, DATA, ALIGN=2

ADCV
        DCB      0x00,0x00
ADAX
        DCB      0x00,0x00
SPITimeout
        DCD      0x0000a000
tx_cfg
        DCD      0x00000000
        DCB      0x00,0x00

        AREA ||area_number.26||, DATA, ALIGN=0

        EXPORTAS ||area_number.26||, ||.data||
rx_cfg
        %        8

;*** Start embedded assembler ***

#line 1 "..\\..\\User\\bsp\\spi\\bsp_spi_flash.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___15_bsp_spi_flash_c_TOTAL_IC____REV16|
#line 129 "..\\..\\Libraries\\CMSIS\\Include\\core_cmInstr.h"
|__asm___15_bsp_spi_flash_c_TOTAL_IC____REV16| PROC
#line 130

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___15_bsp_spi_flash_c_TOTAL_IC____REVSH|
#line 144
|__asm___15_bsp_spi_flash_c_TOTAL_IC____REVSH| PROC
#line 145

 revsh r0, r0
 bx lr
	ENDP
	AREA ||.rrx_text||, CODE
	THUMB
	EXPORT |__asm___15_bsp_spi_flash_c_TOTAL_IC____RRX|
#line 300
|__asm___15_bsp_spi_flash_c_TOTAL_IC____RRX| PROC
#line 301

 rrx r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***

        EXPORT SPI_FLASH_BufferRead [CODE]
        EXPORT SPI_FLASH_BufferWrite [CODE]
        EXPORT SPI_FLASH_BulkErase [CODE]
        EXPORT SPI_FLASH_Init [CODE]
        EXPORT SPI_FLASH_PageWrite [CODE]
        EXPORT SPI_FLASH_ReadByte [CODE]
        EXPORT SPI_FLASH_ReadDeviceID [CODE]
        EXPORT SPI_FLASH_ReadID [CODE]
        EXPORT SPI_FLASH_SectorErase [CODE]
        EXPORT SPI_FLASH_SendByte [CODE]
        EXPORT SPI_FLASH_SendHalfWord [CODE]
        EXPORT SPI_FLASH_StartReadSequence [CODE]
        EXPORT SPI_FLASH_WaitForWriteEnd [CODE]
        EXPORT SPI_FLASH_WriteEnable [CODE]
        EXPORT SPI_Flash_PowerDown [CODE]
        EXPORT SPI_Flash_WAKEUP [CODE]
        EXPORT init_cfg [CODE]
        EXPORT set_adc [CODE]
        EXPORT wakeup_sleep [CODE]
        EXPORT cell_codes [DATA,SIZE=24]
        EXPORT aux_codes [DATA,SIZE=12]
        EXPORT TOTAL_IC [DATA,SIZE=1]
        EXPORT ADCV [DATA,SIZE=2]
        EXPORT ADAX [DATA,SIZE=2]
        EXPORT tx_cfg [DATA,SIZE=6]
        EXPORT rx_cfg [DATA,SIZE=8]

        IMPORT ||Lib$$Request$$armlib|| [CODE,WEAK]
        IMPORT RCC_AHB1PeriphClockCmd [CODE]
        IMPORT RCC_APB2PeriphClockCmd [CODE]
        IMPORT GPIO_PinAFConfig [CODE]
        IMPORT GPIO_Init [CODE]
        IMPORT SPI_Init [CODE]
        IMPORT SPI_Cmd [CODE]
        IMPORT _printf_percent [CODE]
        IMPORT _printf_d [CODE]
        IMPORT _printf_int_dec [CODE]
        IMPORT __2printf [CODE]
        IMPORT SPI_I2S_GetFlagStatus [CODE]
        IMPORT SPI_I2S_SendData [CODE]
        IMPORT SPI_I2S_ReceiveData [CODE]
        IMPORT Delay_10_us [CODE]

        KEEP SPI_TIMEOUT_UserCallback
        KEEP SPITimeout

        ATTR FILESCOPE
        ATTR SETVALUE Tag_ABI_PCS_wchar_t,2
        ATTR SETVALUE Tag_ABI_enum_size,1
        ATTR SETVALUE Tag_ABI_optimization_goals,5
        ATTR SETSTRING Tag_conformance,"2.09"
        ATTR SETVALUE AV,18,1

        ASSERT {ENDIAN} = "little"
        ASSERT {INTER} = {TRUE}
        ASSERT {ROPI} = {FALSE}
        ASSERT {RWPI} = {FALSE}
        ASSERT {IEEE_FULL} = {FALSE}
        ASSERT {IEEE_PART} = {FALSE}
        ASSERT {IEEE_JAVA} = {FALSE}
        END
